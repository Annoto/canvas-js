name: Build and Deploy to CDN
on:
    release:
        types: [released]
env:
    REPO_NAME: ${{ github.event.repository.name }}
    APP_VERSION: ${{ github.ref_name }}
jobs:
    vars:
        runs-on: ubuntu-latest
        steps:
            - name: Set up output variables
              run: echo "setup variables"
        outputs:
            environment: production
            bucket_name: 'cdn.annoto.net'
            aws_region: 'eu-central-1'
            aws_account_id: '281726344480'
            aws_role: 'arn:aws:iam::281726344480:role/nn-cdn-deploy-${{ env.REPO_NAME }}'
            repo_name: ${{ env.REPO_NAME }}
            app_version: ${{ env.APP_VERSION }}
            cloudfront_dist_id: 'E2PYBK8LLNZMVK'
            cloudfront_invalidation_paths: '/${{ env.REPO_NAME }}/latest,/${{ env.REPO_NAME }}/${{ env.APP_VERSION }}'
            node_version: '22'
            build_version_cmd: 'npm run build:version'
            build_latest_cmd: 'npm run build'
            build_artifacts_dir: 'dist'
            s3_cache_control: 'public,no-transform,max-age=86400'
            dry_run: 'false'
            s3_delete: 'false'
            debug: 'false'

    deploy:
        runs-on: ubuntu-latest
        needs: vars
        environment: ${{ needs.vars.outputs.environment }}
        permissions:
            id-token: write
            contents: read
        steps:
            - name: Parse input parameters
              id: input-params
              run: |
                  UPLOAD_SOURCE_DIR="./${{ needs.vars.outputs.build_artifacts_dir }}"
                  UPLOAD_DST_DIR="s3://${{ needs.vars.outputs.bucket_name }}/${{ env.REPO_NAME }}/"

                  echo "dst_dir=${UPLOAD_DST_DIR}" >> $GITHUB_OUTPUT
                  echo "src_dir=${UPLOAD_SOURCE_DIR}" >> $GITHUB_OUTPUT

                  echo "## Build and Sync to S3" >> $GITHUB_STEP_SUMMARY
                  echo "artifacts directory: \`$UPLOAD_SOURCE_DIR\`" >> $GITHUB_STEP_SUMMARY
                  echo "s3 upload destination: \`$UPLOAD_DST_DIR\`" >> $GITHUB_STEP_SUMMARY
                  echo "> dry run: ${{ needs.vars.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY

            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ needs.vars.outputs.node_version }}

            # Skip post-install scripts on ci, as a malicious script could steal NODE_AUTH_TOKEN.
            # `npm rebuild` will run all those post-install scripts for us.
            - name: Install dependencies and prepare the repo
              run: |
                  node -v
                  npm ci --ignore-scripts --include=dev
                  npm rebuild
                  npm run prepare --if-present

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-region: ${{ needs.vars.outputs.aws_region }}
                  role-to-assume: ${{ needs.vars.outputs.aws_role }}
                  role-session-name: deploy-${{ needs.vars.outputs.repo_name }}-${{ needs.vars.outputs.app_version }}-${{ github.actor }}

            - name: Build version
              if: ${{ needs.vars.outputs.build_version_cmd != '' }}
              run: |
                  build_out=$(${{ needs.vars.outputs.build_version_cmd }})
                  echo "${build_out}"
                  echo "<details>" >> $GITHUB_STEP_SUMMARY
                  echo "<summary>Build version output</summary>" >> $GITHUB_STEP_SUMMARY
                  echo "<p>" >> $GITHUB_STEP_SUMMARY
                  echo '' >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "$build_out" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo '' >> $GITHUB_STEP_SUMMARY
                  echo "</p>" >> $GITHUB_STEP_SUMMARY
                  echo "</details>" >> $GITHUB_STEP_SUMMARY

            - name: Upload to S3 version tag
              if: ${{ needs.vars.outputs.build_version_cmd != '' }}
              uses: Annoto/canvas-js/.github/actions/s3-sync@main
              with:
                  src_dir: ${{ steps.input-params.outputs.src_dir }}
                  s3_path: ${{ steps.input-params.outputs.dst_dir }}${{ env.APP_VERSION }}
                  s3_cache_control: ${{ needs.vars.outputs.s3_cache_control }}
                  s3_region: ${{ needs.vars.outputs.aws_region }}
                  s3_delete: ${{ needs.vars.outputs.s3_delete == 'true' }}
                  dry_run: ${{ needs.vars.outputs.dry_run == 'true' }}
                  debug: ${{ needs.vars.outputs.debug == 'true' }}

            - name: Build latest
              if: ${{ needs.vars.outputs.build_latest_cmd != '' }}
              run: |
                  build_out=$(${{ needs.vars.outputs.build_latest_cmd }})
                  echo "${build_out}"
                  echo "<details>" >> $GITHUB_STEP_SUMMARY
                  echo "<summary>Build latest output</summary>" >> $GITHUB_STEP_SUMMARY
                  echo "<p>" >> $GITHUB_STEP_SUMMARY
                  echo '' >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "$build_out" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo '' >> $GITHUB_STEP_SUMMARY
                  echo "</p>" >> $GITHUB_STEP_SUMMARY
                  echo "</details>" >> $GITHUB_STEP_SUMMARY

            - name: Upload to S3 latest tag
              if: ${{ needs.vars.outputs.build_latest_cmd != '' }}
              uses: Annoto/canvas-js/.github/actions/s3-sync@main
              with:
                  src_dir: ${{ steps.input-params.outputs.src_dir }}
                  s3_path: ${{ steps.input-params.outputs.dst_dir }}latest
                  s3_cache_control: ${{ needs.vars.outputs.s3_cache_control }}
                  s3_region: ${{ needs.vars.outputs.aws_region }}
                  s3_delete: ${{ needs.vars.outputs.s3_delete == 'true' }}
                  dry_run: ${{ needs.vars.outputs.dry_run == 'true' }}
                  debug: ${{ needs.vars.outputs.debug == 'true' }}

            - name: Invalidate CloudFront
              uses: Annoto/canvas-js/.github/actions/cloud-front-invalidate@main
              with:
                  paths: ${{ needs.vars.outputs.cloudfront_invalidation_paths }}
                  distribution_id: ${{ needs.vars.outputs.cloudfront_dist_id }}
                  dry_run: ${{ needs.vars.outputs.dry_run == 'true' }}
                  debug: ${{ needs.vars.outputs.debug == 'true' }}
